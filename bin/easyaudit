#!/usr/bin/env php
<?php
if (version_compare(PHP_VERSION, '8.1', '<')) {
    fwrite(STDERR, "EasyAudit requires PHP >= 8.1\n");
    exit(64);
}
define('RESET', "\033[0m");
define('GREEN', "\033[32m");
define('RED', "\033[31m");
define('YELLOW', "\033[33m");
define('BLUE', "\033[34m");
define('BOLD', "\033[1m");

set_exception_handler(function (Throwable $e) {
    fwrite(STDERR, RED . "Error: " . $e->getMessage() . RESET . "\n");
    exit(1);
});

set_error_handler(function ($severity, $message, $file, $line) {
    if (!(error_reporting() & $severity)) {
        return;
    }
    throw new ErrorException($message, 0, $severity, $file, $line);
});

spl_autoload_register(function ($class) {
    $prefix = 'EasyAudit\\';
    $baseDir = __DIR__ . '/../src/';

    if (str_starts_with($class, $prefix)) {
        $relative = substr($class, strlen($prefix));
        $file = $baseDir . str_replace('\\', '/', $relative) . '.php';
        if (file_exists($file)) {
            require $file;
        }
    }
});

switch ($argv[1] ?? null) {
    case 'scan': $command = new \EasyAudit\Console\Command\Scan(); break;
    case 'auth': $command = new \EasyAudit\Console\Command\Auth(); break;
    case 'credits': $command = new \EasyAudit\Console\Command\Credits(); break;
    case 'fix-plan': $command = new \EasyAudit\Console\Command\FixPlan(); break;
    case 'fix-apply': $command = new \EasyAudit\Console\Command\FixApply(); break;
    case 'activate-self-signed': $command = new \EasyAudit\Console\Command\ActivateSelfSigned(); break;
    default:
        fwrite(STDOUT, "EasyAudit - Security auditing tool for PHP applications\n");
        fwrite(STDOUT, "Usage: php easyaudit <command> [options]\n");
        fwrite(STDOUT, "Commands:\n");
        fwrite(STDOUT, "  scan         Perform a security scan\n");
        fwrite(STDOUT, "  auth         Authenticate with the EasyAudit service\n");
        fwrite(STDOUT, "  credits      Display your remaining credits\n");
        fwrite(STDOUT, "  fix-plan     Show a plan of fixes for detected issues\n");
        fwrite(STDOUT, "  fix-apply    Apply fixes for detected issues\n");
        exit(64);
}

$exitCode = $command->run(array_slice($argv, 2));
exit($exitCode);
